<?php
App::uses('AppController', 'Controller');
/**
 * Planes Controller
 *
 * @property Plan $Plan
 * @property PaginatorComponent $Paginator
 * @property SessionComponent $Session
 */
class PlanesController extends AppController {

/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator', 'Session');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Plan->recursive = 0;
		$this->set('planes', $this->Paginator->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Plan->exists($id)) {
			throw new NotFoundException(__('Invalid plan'));
		}
		$options = array('conditions' => array('Plan.' . $this->Plan->primaryKey => $id));
		$this->set('plan', $this->Plan->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Plan->create();
			if ($this->Plan->save($this->request->data)) {
				$this->Session->setFlash(__('The plan has been saved.'));
				return $this->redirect(array('action' => 'nuebus'));
			} else {
				$this->Session->setFlash(__('The plan could not be saved. Please, try again.'));
			}
		}
		$responsables = $this->Plan->Responsable->find('list');
		$this->set(compact('responsables'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Plan->exists($id)) {
			throw new NotFoundException(__('Invalid plan'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Plan->save($this->request->data)) {
				$this->Session->setFlash(__('The plan has been saved.'));
				return $this->redirect(array('action' => 'nuebus'));
			} else {
				$this->Session->setFlash(__('The plan could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Plan.' . $this->Plan->primaryKey => $id));
			$this->request->data = $this->Plan->find('first', $options);
		}
		$responsables = $this->Plan->Responsable->find('list');
		$this->set(compact('responsables'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->Plan->id = $id;
		if (!$this->Plan->exists()) {
			throw new NotFoundException(__('Invalid plan'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->Plan->delete()) {
			$this->Session->setFlash(__('The plan has been deleted.'));
		} else {
			$this->Session->setFlash(__('The plan could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}

	function nuebus() {
        $campos = array("Dimension");
        if(isset($this->data) && !empty($this->data)){
			
			$campoFiltro = $this->data["Plan"]["Campo"];
			$textoFiltro = $this->data["Plan"]["Dimension"];
		    

		    $filtroTema = $this->data["Plan"]["Tema"];
		    $filtroObjetivog = $this->data["Plan"]["Objetivog"];
		    $filtroDimension = $this->data["Plan"]["Dimension"];
		    		   

			$con = array(strtolower($campos[$campoFiltro])." like" => "%".$textoFiltro."%");//array("or" => array("tema like" => "%".$this->data["Actividad"]["Busqueda"]."%", "poblacion like " => "%".$this->data["Actividad"]["Busqueda"]."%","eje like " => "%".$this->data["Actividad"]["Busqueda"]."%","prioridad like " => "%".$this->data["Actividad"]["Busqueda"]."%","comuna_id like " => "%".$this->data["Actividad"]["Busqueda"]."%"));
			$tema = "UPPER(tema) like '%" . $filtroTema . "%'";
			$objetivog = "UPPER(objetivog) like '%" . $filtroObjetivog . "%'";
			$dimension = "UPPER(dimension) like '%". $filtroDimension."%'";
			
			
			
			array_push($con, $tema);
			array_push($con, $objetivog);
			array_push($con, $dimension);
			
			
			

		} else {
			$con = null;
		}
        $this->Plan->recursive = 0;
		$paginate = array("fields" => array("id" , "tema" , "objetivog", "tipoblacion","dimension", "resultado"), "conditions" => $con, "limit" => 30);
		$this->Paginator->settings = $paginate;
		$this->set("Campos", $campos);
		$this->set("l", $this->paginate());
	}
	
}

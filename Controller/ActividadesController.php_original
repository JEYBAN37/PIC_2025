<?php

App::uses('AppController', 'Controller');
App::uses('Sanitize', 'Utility');

/**
 * Actividades Controller
 *
 * @property Actividad $Actividad
 * @property PaginatorComponent $Paginator
 */
class ActividadesController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator', 'Session', 'RequestHandler');

    /**
     * index method
     *
     * @return void
     */
    public function index() {
        $this->Actividad->recursive = 0;
        $this->set('actividades', $this->Paginator->paginate());
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Actividad->exists($id)) {
            throw new NotFoundException(__('La Actividad no es válida.'));
        }
        $options = array('conditions' => array('Actividad.' . $this->Actividad->primaryKey => $id));
        $this->set('actividad', $this->Actividad->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Actividad->create();
            if ($this->Actividad->save($this->request->data)) {
               // $this->Session->setFlash(__('La Actividad se ha guardado.'));
               // return $this->redirect(array('action' => 'index'));

              $id = $this->Actividad->id; 
                $aux = "view/$id";
                return $this->redirect(array('action' => $aux));	
            } else {
                $this->Session->setFlash(__('La Actividad no se pudo guardar. Por favor, inténtelo de nuevo.'));
            }
        }
        $ubicaciones = $this->Actividad->Ubicacion->find('list');
        $responsables = $this->Actividad->Responsable->find('list');
        //$poblaciones = $this->Actividad->Poblacion->find('list');
        $this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
    }

     public function menusms() {
        if ($this->request->is('post')) {
            $this->Actividad->create();
            if ($this->Actividad->save($this->request->data)) {
               // $this->Session->setFlash(__('La Actividad se ha guardado.'));
               // return $this->redirect(array('action' => 'index'));

              $id = $this->Actividad->id; 
                $aux = "view/$id";
                return $this->redirect(array('action' => $aux));    
            } else {
                $this->Session->setFlash(__('La Actividad no se pudo guardar. Por favor, inténtelo de nuevo.'));
            }
        }
        $ubicaciones = $this->Actividad->Ubicacion->find('list');
        $responsables = $this->Actividad->Responsable->find('list');
        //$poblaciones = $this->Actividad->Poblacion->find('list');
        $this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
    }


    public function add1() {
        if ($this->request->is('post')) {
            $this->Actividad->create();

            //$poblaciones = $this->request->data->find('poblaciones');
            //$this->data["Actividad"]["poblaciones"];

            if ($this->Actividad->save($this->request->data)) {
                $this->Session->setFlash(__('La Actividad se ha guardado.'));
                //return $this->redirect(array('action' => 'nuebus'));
                $id = $this->Actividad->id; 
                $aux = "view/$id";
                return $this->redirect(array('action' => $aux));
            } else {
                $this->Session->setFlash(__('La Actividad no se pudo guardar. Por favor, inténtelo de nuevo.'));
            }
        }
        $ubicaciones = $this->Actividad->Ubicacion->find('list');
        $responsables = $this->Actividad->Responsable->find('list');
        $productos = $this->Actividad->Producto->find('list');
        //$poblaciones = $this->Actividad->Poblacion->find('list');
        $this->set(compact('ubicaciones', 'responsables', 'poblaciones', 'productos'));
    }

    public function add2015() {
        if ($this->request->is('post')) {
            $this->Actividad->create();
            if ($this->Actividad->save($this->request->data)) {
                $this->Session->setFlash(__('La Actividad se ha guardado.'));
                return $this->redirect(array('action' => 'nuebus'));
            } else {
                $this->Session->setFlash(__('La Actividad no se pudo guardar. Por favor, inténtelo de nuevo.'));
            }
        }
        $ubicaciones = $this->Actividad->Ubicacion->find('list');
        $responsables = $this->Actividad->Responsable->find('list');
        //$poblaciones = $this->Actividad->Poblacion->find('list');
        $this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
    }

    public function addacta() {
        if ($this->request->is('post')) {
            $this->Actividad->create();
            if ($this->Actividad->save($this->request->data)) {
                $this->Session->setFlash(__('Se ha guardado correctamente.'));
                return $this->redirect(array('action' => 'nuebus'));
            } else {
                $this->Session->setFlash(__('Noo se pudo guardar. Por favor, inténtelo de nuevo.'));
            }
        }
        $ubicaciones = $this->Actividad->Ubicacion->find('list');
        $responsables = $this->Actividad->Responsable->find('list');
        //$poblaciones = $this->Actividad->Poblacion->find('list');
        $this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
    }

    function nuebus() {
        $this->Actividad->recursive = 0;
        
        $paginate = array("fields" => array("id", "tema", "poblaciones","nombregrupo" ,"fecha", "comunas", "dimension", "pro_asociado", "anexo"));
        $this->Paginator->settings = $paginate;
        
        $count = $this->Actividad->find('count');
        $this->Paginator->settings['limit'] = $count;
        
        $this->set("l", $this->paginate());        
    }

	function check() {
        $campos = array("Dimension");

        if(isset($this->data) && !empty($this->data)){

		    $campoFiltro = $this->data["Actividad"]["Campo"];
		    $textoFiltro = $this->data["Actividad"]["Dimension"];

		    $filtroPoblaciones = $this->data["Actividad"]["Poblaciones"];
		    $filtroComunas = $this->data["Actividad"]["Comunas"];

			$con = array(strtolower($campos[$campoFiltro])." like" => "%".$textoFiltro."%");//array("or" => array("tema like" => "%".$this->data["Actividad"]["Busqueda"]."%", "poblacion like " => "%".$this->data["Actividad"]["Busqueda"]."%","eje like " => "%".$this->data["Actividad"]["Busqueda"]."%","prioridad like " => "%".$this->data["Actividad"]["Busqueda"]."%","comuna_id like " => "%".$this->data["Actividad"]["Busqueda"]."%"));
			$poblaciones = "UPPER(poblaciones) like '%" . $filtroPoblaciones . "%'";
			$comunas = "UPPER(comunas) like '%" . $filtroComunas . "%'";
			array_push($con, $poblaciones);
			array_push($con, $comunas);
		} else {
			$con = null;
		}
        $this->Actividad->recursive = 0;
		$paginate = array("fields" => array("id", "tema", "poblaciones", "fecha", "comunas", "dimension", "pro_asociado","anexo"), "conditions" => $con, "limit" => 30);
		$this->Paginator->settings = $paginate;
		$this->set("Campos", $campos);
		$this->set("l", $this->paginate());		
	}
/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Actividad->exists($id)) {
			throw new NotFoundException(__('La Actividad no es válida.'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Actividad->save($this->request->data)) {
				//$this->Session->setFlash(__('La Actividad se ha editado.'));
				//return $this->redirect(array('action' => 'nuebus'));

			 $id = $this->Actividad->id; 
             $aux = "view/$id";
                return $this->redirect(array('action' => $aux));	
			} else {
				$this->Session->setFlash(__('La Actividad no se pudo editar. Por favor, inténtelo de nuevo.'));
			}
		} else {
			$options = array('conditions' => array('Actividad.' . $this->Actividad->primaryKey => $id));
			$this->request->data = $this->Actividad->find('first', $options);
		}
		$ubicaciones = $this->Actividad->Ubicacion->find('list');
		$responsables = $this->Actividad->Responsable->find('list');
		$poblaciones = $this->Actividad->Poblacion->find('list');
		
		$productos = $this->Actividad->Producto->find('list');
        $this->set(compact('ubicaciones', 'responsables', 'poblaciones', 'productos'));
		
	}

	public function checkedit($id = null) {
		if (!$this->Actividad->exists($id)) {
			throw new NotFoundException(__('La Actividad no es válida.'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Actividad->save($this->request->data)) {
				$this->Session->setFlash(__('La Actividad se ha editado.'));
				return $this->redirect(array('action' => 'check'));
			} else {
				$this->Session->setFlash(__('La Actividad no se pudo editar. Por favor, inténtelo de nuevo.'));
			}
		} else {
			$options = array('conditions' => array('Actividad.' . $this->Actividad->primaryKey => $id));
			$this->request->data = $this->Actividad->find('first', $options);
		}
		$ubicaciones = $this->Actividad->Ubicacion->find('list');
		$responsables = $this->Actividad->Responsable->find('list');
		$poblaciones = $this->Actividad->Poblacion->find('list');
		$this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
	}

	public function editanexo($id = null) {
		if (!$this->Actividad->exists($id)) {
			throw new NotFoundException(__('La Actividad no es válida.'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Actividad->save($this->request->data)) {
				//$this->Session->setFlash(__('La Actividad se ha editado.'));
				//return $this->redirect(array('action' => 'nuebus'));

				 $id = $this->Actividad->id; 
                $aux = "view/$id";
                return $this->redirect(array('action' => $aux));	
			} else {
				$this->Session->setFlash(__('La Actividad no se pudo editar. Por favor, inténtelo de nuevo.'));
			}
		} else {
			$options = array('conditions' => array('Actividad.' . $this->Actividad->primaryKey => $id));
			$this->request->data = $this->Actividad->find('first', $options);
		}
		$ubicaciones = $this->Actividad->Ubicacion->find('list');
		$responsables = $this->Actividad->Responsable->find('list');
		$poblaciones = $this->Actividad->Poblacion->find('list');
		$this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
	}
	
	
	
	public function edit2015($id = null) {
		if (!$this->Actividad->exists($id)) {
			throw new NotFoundException(__('La Actividad no es válida.'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Actividad->save($this->request->data)) {
				$this->Session->setFlash(__('La Actividad se ha editado.'));
				return $this->redirect(array('action' => 'nuebus'));
			} else {
				$this->Session->setFlash(__('La Actividad no se pudo editar. Por favor, inténtelo de nuevo.'));
			}
		} else {
			$options = array('conditions' => array('Actividad.' . $this->Actividad->primaryKey => $id));
			$this->request->data = $this->Actividad->find('first', $options);
		}
		$ubicaciones = $this->Actividad->Ubicacion->find('list');
		$responsables = $this->Actividad->Responsable->find('list');
		$poblaciones = $this->Actividad->Poblacion->find('list');
		$this->set(compact('ubicaciones', 'responsables', 'poblaciones'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->Actividad->id = $id;
		if (!$this->Actividad->exists()) {
			throw new NotFoundException(__('La Actividad no es válida.'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->Actividad->delete()) {
			$this->Session->setFlash(__('La Actividad se ha eliminado.'));
		} else {
			$this->Session->setFlash(__('La Actividad no se pudo eliminar. Por favor, inténtelo de nuevo.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
	
	/*public function excel (){
        $campos = array("Tema", "Comunas", "Poblaciones", "Dimension", "Pro_asociado");
       	$this->layout='excel';
       	$this->Actividad->recursive = 0;



	    $campoFiltro = $this->data["Actividad"]["Campo"];
	    $textoFiltro = $this->data["Actividad"]["Dimension"];


	    $filtroPoblaciones = $this->data["Actividad"]["Poblaciones"];
		    $filtroComunas = $this->data["Actividad"]["Comunas"];

		$con = array("Dimension like '%" . $textoFiltro . "%'");//array("or" => array("tema like" => "%".$this->data["Actividad"]["Busqueda"]."%", "poblacion like " => "%".$this->data["Actividad"]["Busqueda"]."%","eje like " => "%".$this->data["Actividad"]["Busqueda"]."%","prioridad like " => "%".$this->data["Actividad"]["Busqueda"]."%","comuna_id like " => "%".$this->data["Actividad"]["Busqueda"]."%"));
		$poblaciones = "UPPER(poblaciones) like '%" . $filtroPoblaciones . "%'";
		$comunas = "UPPER(comunas) like '%" . $filtroComunas . "%'";
		array_push($con, $poblaciones);
		array_push($con, $comunas);




       $actividades = $this->Actividad->find("all", array(
       	'conditions' => $con));
       $this->set('actividades', $actividades);
   }*/

   public function excel (){
       $this->layout='excel';
       $this->Actividad->recursive = 0;
       $this->set('actividades', $this->Actividad->find("all"));

          
   }

	
}
